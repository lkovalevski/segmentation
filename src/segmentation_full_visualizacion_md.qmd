---
title: "Segmentation example with Credit Risk Data"
author: "Leandro Kovalevski"
format:
  gfm:
    toc: true
    number-sections: true
    toc-depth: 2
    code-fold: true
    code-summary: "Show the code"
    highlight-style: github
theme:
  light: zephyr
  dark: cyborg
---

# Settings {-}


```{python}
# Re-import required libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from pathlib import Path
import ast

# Set report path
REPORTS_DIR = Path.cwd().parent / "results" / "reports"
results_path = REPORTS_DIR / "results_4methods_3samples_6clusters.csv"
df_results = pd.read_csv(results_path)

# Correct method labels
method_mapping = {
    "logit": "Logistic Regression",
    "rf": "Random Forest",
    "gb": "Gradient Boosting",
    "nn": "Neural Network"
}
df_results["method"] = df_results["method"].map(method_mapping)

# Create 'segmented' flag
df_results["segmented"] = df_results["n_clusters"].apply(lambda x: 1 if x > 1 else 0)
df_results["segmented"] = df_results["segmented"].map({0: "No", 1: "Yes"})

```

# Performance Comparison Across All Scenarios

```{python}

# Plot: overall comparison
plt.figure(figsize=(8, 6))
sns.set(style="whitegrid")
sns.stripplot(
    data=df_results,
    x="method",
    y="weighted_auc",
    hue="segmented",
    dodge=True,
    jitter=True,
    alpha=0.7,
    palette="Set1"
)
plt.title("Performance by Method and Segmentation")
plt.ylabel("Weighted AUC")
plt.xlabel("Modeling Method")
plt.legend(title="Segmented?")
plt.ylim(0.6, 0.9)
plt.tight_layout()
plt.show()

```



# Performance by Test Sample Size and Number of Clusters per Method

```{python}
# Set style
sns.set(style="whitegrid")

# Create one grid per method
g = sns.FacetGrid(
    df_results,
    col="method",
    col_wrap=2,
    height=2.5,
    aspect=1.2,
    sharey=True
)

# Function to connect AUCs by cluster count for each test size
def plot_lines(data, **kwargs):
    sns.lineplot(
        data=data,
        x="n_clusters",
        y="weighted_auc",
        hue="test_size",
        marker="o",
        palette="Set2",
        linewidth=2,
        **kwargs
    )

g.map_dataframe(plot_lines)
g.set(ylim=(0.6, 0.9))
g.set_axis_labels("Number of Clusters", "Weighted AUC")
g.set_titles("Method: {col_name}")
g.add_legend(title="Test Size (%)")
plt.tight_layout()
```


# Segment-Level Performance by Number of Clusters for Each Method (Test Size = 0.05) 

```{python}
# Filter for test_size = 0.05
df_plot = df_results[df_results["test_size"] == 0.05].copy()

# Parse string to list of tuples
df_plot["segments"] = df_plot["segments"].apply(ast.literal_eval)

# Get base AUC for each method (non-segmented)
df_base_auc = df_plot[df_plot["n_clusters"] == 1][["method", "weighted_auc"]].set_index("method")["weighted_auc"]

# Expand segments to long format
rows = []
for _, row in df_plot.iterrows():
    method = row["method"]
    n_clusters = int(row["n_clusters"])
    for seg_id, auc in row["segments"]:
        rows.append({
            "method": method,
            "n_clusters": n_clusters,
            "segment_id": int(seg_id),
            "auc": auc
        })

df_segments = pd.DataFrame(rows)

# Add base AUC column
df_segments["auc_base"] = df_segments["method"].map(df_base_auc)

# Flag segments above/below baseline
df_segments["above_baseline"] = df_segments["auc"] > df_segments["auc_base"]

# Plot segment-level AUCs
sns.set(style="whitegrid")
g = sns.FacetGrid(
    df_segments,
    col="method",
    col_wrap=1,
    height=4,
    aspect=2,
    sharey=True
)

def plot_segments(data, **kwargs):
    base_auc = data["auc_base"].iloc[0]
    plt.axhline(base_auc, color="gray", linestyle="dotted", label=f"Baseline AUC: {base_auc:.3f}")
    plt.text(
        data["n_clusters"].min() - 0.3,
        base_auc + 0.005,
        f"{base_auc:.3f}",
        va="bottom",
        ha="left",
        fontsize=9,
        color="gray"
    )
    
    above = data[data["above_baseline"]]
    below = data[~data["above_baseline"]]
    
    plt.scatter(above["n_clusters"], above["auc"], color="green", label="AUC > baseline")
    plt.scatter(below["n_clusters"], below["auc"], color="red", label="AUC â‰¤ baseline")
    
    max_auc = data.groupby("n_clusters")["auc"].max().reset_index()
    for _, row in max_auc.iterrows():
        plt.text(
            row["n_clusters"],
            row["auc"] + 0.005,
            f"{row['auc']:.3f}",
            ha="center",
            fontsize=8,
            color="black"
        )

g.map_dataframe(plot_segments)
g.set_axis_labels("Number of Clusters", "AUC per Segment")
g.set_titles("Method: {col_name}")
g.set(ylim=(0.55, 0.95))

plt.tight_layout()
plt.show()
```